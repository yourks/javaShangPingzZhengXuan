package com.atguigu.spzx.common.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;


/**
 * className:{SpringMvcConfig} 配置类                @Configuration
 * 1.controller                                     @ComponentScan
 * 2.handlerMapping handlerAdapter json转换器注解    @EnableWebMvc
 * 2.全局异常处理器
 * 4.静态资源处理             二秘书干活               configureDefaultServletHandling
 * 5.jsp 视图解析器前后缀                             configureViewResolvers
 * 6.拦截器                                         addInterceptors
 * */
//说明是配置文件注解
@Configuration
//扫描包配置注解
@ComponentScan(value = {
//        "com.atguigu.config.interceptor"//全局拦截器
})
//添加 经理RequestMappingHandlerAdapter 秘书handelMapping 和 json转换器注解
@EnableWebMvc

public class WebMvcConfiguration implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        /**
         addMapping("/**") // 添加路径规则
         .allowCredentials(true)               // 是否允许在跨域的情况下传递Cookie
         .allowedOriginPatterns("*")           // 允许请求来源的域规则
         .allowedHeaders("*") ;                // 允许所有的请求头
         * */
        registry.addMapping("/**")
                .allowCredentials(true)
                .allowedOriginPatterns("*")
                .allowedMethods("*")
                .allowedHeaders("*") ;
    }
    /**
     * @EnableWebMvc 帮忙搞定了
    public RequestMappingHandlerAdapter requestMappingHandlerAdapter(){
    return new RequestMappingHandlerAdapter();
    }

    public RequestMappingHandlerMapping requestMappingHandlerMapping(){
    return new RequestMappingHandlerMapping();
    }
     * */

    /**
     *     注册 拦截器 设置
     * */
    /**
     @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new GlobalHandleInterceptor());
    }
      * */

    /**
     *     外部访问静态资源 设置
     @Override
     public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
     configurer.enable();
     }
      * */

    /**
     *     web jsp 访问 地址 前后缀设置
     @Override
     public void configureViewResolvers(ViewResolverRegistry registry) {
     registry.jsp("WEB_INF",".jsp");
     }
      * */
}
