<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace等于mapper接口类的全限定名,这样实现对应 -->
<mapper namespace="com.atguigu.spzx.manager.mapper.CategoryBrandMapper">
    <resultMap id="CategoryBrandMap" type="com.atguigu.spzx.model.entity.product.CategoryBrand" autoMapping="true"></resultMap>

<!--    @Schema(description = "品牌id")-->
<!--    private Long brandId;-->

<!--    @Schema(description = "分类id")-->
<!--    private Long categoryId;-->

<!--    @Schema(description = "分类名称" , required = false)-->
<!--    private String categoryName;-->

<!--    @Schema(description = "品牌名称" , required = false)-->
<!--    private String brandName;-->

<!--    @Schema(description = "品牌logo" , required = false)-->
<!--    private String logo;-->

<!--    @Schema(description = "唯一标识")-->
<!--    private Long id;-->

<!--    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")-->
<!--    @Schema(description = "创建时间")-->
<!--    private Date createTime;-->

<!--    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")-->
<!--    @Schema(description = "修改时间")-->
<!--    private Date updateTime;-->

<!--    @Schema(description = "是否删除")-->
<!--    private Integer isDeleted;-->
    <sql id="columns">
        id,brand_id brandId,category_id categoryId,logo,create_time createTime,update_time updateTime,is_deleted isDeleted
    </sql>

    <select id="fingByPage" resultMap="CategoryBrandMap">
        SELECT category_brand.* ,category.`name` categoryName,brand.`name` brandName,brand.logo FROM category_brand
        LEFT JOIN category ON  category_brand.category_id = category.id
        LEFT JOIN brand ON category_brand.brand_id = brand.id
        <where>
            <if test="brandId != null and brandId !=''">
                and category_brand.brand_id = #{brandId}
            </if>
            <if test="categoryId != null and categoryId !=''">
                and category_brand.category_id = #{categoryId}
            </if>
            and category_brand.is_deleted=0
        </where>
<!--        <where>-->
<!--            <if test="categoryId != null and categoryId != ''">-->
<!--                category_brand.category_id = #{categoryId} AND-->
<!--            </if>-->
<!--            <if test="brand_id != null and brand_id != ''">-->
<!--                category_brand.brand_id = #{brandId} AND-->
<!--            </if>-->
<!--            category_brand.is_deleted = 0-->
<!--        </where>-->

    </select>

    <insert id="insert" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into category_brand(
        brand_id
        ,category_id
        ,create_time
        ,update_time
        ,is_deleted
        ) values(
        #{brandId}
        ,#{categoryId}
        ,now()
        ,now()
        ,0
        )
    </insert>
<!--    int updateById(CategoryBrand categoryBrand);-->
    <update id="updateById" >
        update category_brand set
        brand_id = #{ brandId }
        ,category_id = #{ categoryId }
        where id = #{ id } and is_deleted=0
    </update>

    <update id="deleteById" >
        update category_brand set
        is_deleted=1
        where id = #{ id };
    </update>

    <select id="findBrandByCategoryId" resultMap="CategoryBrandMap">
        select brand.*,brand.name brandName
        from category_brand
        LEFT JOIN brand ON category_brand.brand_id = brand.id
        WHERE category_brand.is_deleted = 0
        AND category_brand.category_id = #{categoryId}
        order by id desc
    </select>

</mapper>