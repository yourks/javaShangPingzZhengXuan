<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <settings>
        <!--开启驼峰式自动映射 数据库 a_column java aColumn -->
        <!-- 表xx_yy 模型xxYy 直接转-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!-- resultMap 标签 有没有嵌套都会自动帮我们映射result标签的属性和列 NONE, PARTIAL, FULL-->
        <setting name="autoMappingBehavior" value="FULL"/>
        <!-- 日志配置 -->
        <setting name="logImpl" value="STDOUT_LOGGING"/>
        <!--        <setting name="logImpl" value="SLF4J"/>-->
    </settings>

    <typeAliases>
        <!-- 批量将包下的类给与别名，别名就是类的首字母小写！ -->
        <package name="com.atguigu.pojo"/>
    </typeAliases>

    <!-- mybatis内部配置插件,可以sql语句拦截了 -->
    <plugins>
        <plugin interceptor="com.github.pagehelper.PageInterceptor">
            <property name="helperDialect" value="mysql"/>
        </plugin>
    </plugins>

    <!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 -->
    <environments default="development">
        <!-- environment表示配置Mybatis的一个具体的环境 -->
        <environment id="development">
            <!-- Mybatis的内置的事务管理器 -->
            <transactionManager type="JDBC"/>
            <!-- 配置数据源 -->
            <dataSource type="POOLED">
                <!-- 建立数据库连接的具体信息 -->
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <!-- <property name="url" value="jdbc:mysql://localhost:3306/mybatis-example"/> -->
                <property name="url" value="jdbc:mysql://localhost:3306/mybatisExample?allowMultiQueries=true"/>
                <property name="username" value="root"/>
                <property name="password" value="a123456"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <!-- Mapper注册：指定Mybatis映射文件的具体位置 -->
        <!-- mapper标签：配置一个具体的Mapper映射文件 -->
        <!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 -->
        <!-- 对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 -->
        <!-- <mapper resource="mappers/EmployeeMapper.xml"/> -->
        <!--        <mapper resource="mappers/ParamEmployeeMapper.xml"/>-->
        <!--        <mapper resource="mapper/UserMapper.xml"/>-->
        <!--        <mapper resource="mapper/OrderMapper.xml"/>-->
        <!--        <mapper resource="mapper/customerMapper.xml"/>-->
        <!--        <mapper resource="mapper/EmployeeMapper.xml"/>-->
        <!-- 批量mapper指定
       1. 要求Mapperxml文件和mapper接口的命名必须相同
       2. 最终打包后的位置要一致 都是指定的包地址下！
            方案1： xml文件也加入到接口所在的包即可
            方案2： resources文件夹创建对应的文件夹结构即可
       注意： resources下直接创建多层文件夹  使用 /分割  .就是一层文件夹
       使用 /分割!!!
 -->
        <package name="com.atguigu.mapper"/>
    </mappers>

</configuration>

        <!-- mybatis依赖 ～～～～
            //mybatis依赖
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>3.5.11</version>
            </dependency>

            //MySQL驱动 mybatis底层依赖jdbc驱动实现,本次不需要导入连接池,mybatis自带!
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>8.0.25</version>
            </dependency>

            //junit5测试
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>5.3.1</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.11</version>
                <scope>test</scope>
            </dependency>
         -->
        <!-- 事务流程说明～～～～
        /**
        *  1.获取 根据 配置地址 获取 io流
        *  2.获取 会话工厂创建者实体类 创建会话工厂 通过会话工厂 拿到会话实体类
        *  3.通过会话实体类 拿到模型代理对象
        *  4.调用代理方法
        *  5.提交关闭会话
        * */
        String resource = "Parammybatis-config.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSession sqlSession = new SqlSessionFactoryBuilder().build(inputStream).openSession();
        EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class) ;
        Employee employee =  employeeMapper.selectEmployee(1);
        System.out.println("employee"+ employee);
        sqlSession.commit();
        sqlSession.close();
        -->
        <!-- PageHelper～～～～ 插件和分页插件PageHelper
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
            <version>5.1.11</version>
        </dependency>

        PageHelper.startPage(1,2);
        List employeeList = employeeMapper.queryList();
        System.out.println("employeeList-"+  employeeList);
        PageInfo pageInfo = new PageInfo(employeeList);
        System.out.println("pageInfo-"+  pageInfo.toString());
        //当前页的数据
        List<Employee> list1 = pageInfo.getList();
        System.out.println("list1 = " + list1);
        //获取总页数
        int pages = pageInfo.getPages();
        System.out.println("pages = " + pages);
        //总条数
        long total = pageInfo.getTotal();
        System.out.println("total = " + total);
        int pageNum = pageInfo.getPageNum();
        System.out.println("pageNum = " + pageNum);
        int pageSize = pageInfo.getPageSize();
        System.out.println("pageSize = " + pageSize);
        -->